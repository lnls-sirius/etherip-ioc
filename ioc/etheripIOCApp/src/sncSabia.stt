program sncSabia

%%//----------------------------------------
%%//    Global Variables
%%//----------------------------------------

#define DELTA_PERIOD 52.5
#define ARR_SIVE_CONV_SHIFT_K 262501
#define ARR_SIVE_CONV_K_ENERGY 525001
#define POLYNOMIAL_DEGREE 8

double arr_conv_shift_k[2][ARR_SIVE_CONV_SHIFT_K];
double arr_conv_k_energy[2][ARR_SIVE_CONV_K_ENERGY];

%%//----------------------------------------
%%//    Monitored PVs - High Level
%%//----------------------------------------

int pos_tolerance_sp;
assign pos_tolerance_sp to "{P}{R}PosTolerance-SP";
monitor pos_tolerance_sp;

int change_pol_evt;
assign change_pol_evt to "{P}{R}ChangePolFlg";
monitor change_pol_evt;
evflag change_pol_evt_flg;
sync change_pol_evt change_pol_evt_flg;

int pol_type_sel;
assign pol_type_sel to "{P}{R}PolType-Sel";
monitor pol_type_sel;
evflag pol_type_sel_flg;
sync pol_type_sel pol_type_sel_flg;

int change_gain_evt;
assign change_gain_evt to "{P}{R}ChangeGainFlg";
monitor change_gain_evt;
evflag change_gain_evt_flg;
sync change_gain_evt change_gain_evt_flg;

int gain_motion_type_sel;
assign gain_motion_type_sel to "{P}{R}GainMotionType-Sel";
monitor gain_motion_type_sel;
evflag gain_motion_type_sel_flg;
sync gain_motion_type_sel gain_motion_type_sel_flg;

int energy_sp;
assign energy_sp to "{P}{R}Energy-SP";
monitor energy_sp;
evflag energy_sp_flg;
sync energy_sp energy_sp_flg;

int k_sp;
assign k_sp to "{P}{R}K-SP";
monitor k_sp;
evflag k_sp_flg;
sync k_sp k_sp_flg;

int shift_sp;
assign shift_sp to "{P}{R}Shift-SP";
monitor shift_sp;
evflag shift_sp_flg;
sync shift_sp shift_sp_flg;

int start_escan_evt;
assign start_escan_evt to "{P}{R}StartEScanFlg";
monitor start_escan_evt;
evflag start_escan_evt_flg;
sync start_escan_evt start_escan_evt_flg;

int escan_start_pos_sp;
assign escan_start_pos_sp to "{P}{R}EScanStartPos-SP";
monitor escan_start_pos_sp;
evflag escan_start_pos_sp_flg;
sync escan_start_pos_sp escan_start_pos_sp_flg;

int escan_end_pos_sp;
assign escan_end_pos_sp to "{P}{R}EScanEndPos-SP";
monitor escan_end_pos_sp;
evflag escan_end_pos_sp_flg;
sync escan_end_pos_sp escan_end_pos_sp_flg;

int pol_mode_velo_sp;
assign pol_mode_velo_sp to "{P}{R}PolModeVelo-SP";
monitor pol_mode_velo_sp;
evflag pol_mode_velo_sp_flg;
sync pol_mode_velo_sp pol_mode_velo_sp_flg;

int pol_mode_acc_sp;
assign pol_mode_acc_sp to "{P}{R}PolModeAcc-SP";
monitor pol_mode_acc_sp;
evflag pol_mode_acc_sp_flg;
sync pol_mode_acc_sp pol_mode_acc_sp_flg;

int gain_mode_velo_sp;
assign gain_mode_velo_sp to "{P}{R}GainModeVelo-SP";
monitor gain_mode_velo_sp;
evflag gain_mode_velo_sp_flg;
sync gain_mode_velo_sp gain_mode_velo_sp_flg;

int gain_mode_acc_sp;
assign gain_mode_acc_sp to "{P}{R}GainModeAcc-SP";
monitor gain_mode_acc_sp;
evflag gain_mode_acc_sp_flg;
sync gain_mode_acc_sp gain_mode_acc_sp_flg;

int max_velo_sp;
assign max_velo_sp to "{P}{R}MaxVelo-SP";
monitor max_velo_sp;
evflag max_velo_sp_flg;
sync max_velo_sp max_velo_sp_flg;

int max_acc_sp;
assign max_acc_sp to "{P}{R}MaxAcc-SP";
monitor max_acc_sp;
evflag max_acc_sp_flg;
sync max_acc_sp max_acc_sp_flg;

int parking_request_evt;
assign parking_request_evt to "{P}{R}ParkingRequestFlg";
monitor parking_request_evt;
evflag parking_request_evt_flg;
sync parking_request_evt parking_request_evt_flg;

int parking_pol_shift_sp;
assign parking_pol_shift_sp to "{P}{R}ParkingPolShift-SP";
monitor parking_pol_shift_sp;

int parking_gain_shift_sp;
assign parking_gain_shift_sp to "{P}{R}ParkingGainShift-SP";
monitor parking_gain_shift_sp;

int get_parking_request_evt;
assign get_parking_request_evt to "{P}{R}GetParkingRequestFlg";
monitor get_parking_request_evt;
evflag get_parking_request_evt_flg;
sync get_parking_request_evt get_parking_request_evt_flg;

int actual_pol_displacement_mon;
assign actual_pol_displacement_mon to "{P}{R}ActualPolDisplacement-Mon";
monitor actual_pol_displacement_mon;

int actual_pol_mon;
assign actual_pol_mon to "{P}{R}ActualPol-Mon";
monitor actual_pol_mon;

int actual_gain_displacement_mon;
assign actual_gain_displacement_mon to "{P}{R}ActualGainDisplacement-Mon";
monitor actual_gain_displacement_mon;

int actual_k_mon;
assign actual_k_mon to "{P}{R}ActualK-Mon";
monitor actual_k_mon;

int actual_energy_mon;
assign actual_energy_mon to "{P}{R}ActualEnergy-Mon";
monitor actual_energy_mon;

%%// Conversion Coefficients - Shift to K

int conv_shift_to_k_evt;
assign conv_shift_to_k_evt to "ConvShiftToKFlg";
monitor conv_shift_to_k_evt;
evflag conv_shift_to_k_evt_flg;
sync conv_shift_to_k_evt conv_shift_to_k_evt_flg;

int conv_shift_to_k_a0_sp;
assign conv_shift_to_k_a0_sp to "{P}{R}ConvShiftToKA0-SP";
monitor conv_shift_to_k_a0_sp;

int conv_shift_to_k_a1_sp;
assign conv_shift_to_k_a1_sp to "{P}{R}ConvShiftToKA1-SP";
monitor conv_shift_to_k_a1_sp;

int conv_shift_to_k_a2_sp;
assign conv_shift_to_k_a2_sp to "{P}{R}ConvShiftToKA2-SP";
monitor conv_shift_to_k_a2_sp;

int conv_shift_to_k_a3_sp;
assign conv_shift_to_k_a3_sp to "{P}{R}ConvShiftToKA3-SP";
monitor conv_shift_to_k_a3_sp;

int conv_shift_to_k_a4_sp;
assign conv_shift_to_k_a4_sp to "{P}{R}ConvShiftToKA4-SP";
monitor conv_shift_to_k_a4_sp;

int conv_shift_to_k_a5_sp;
assign conv_shift_to_k_a5_sp to "{P}{R}ConvShiftToKA5-SP";
monitor conv_shift_to_k_a5_sp;

int conv_shift_to_k_a6_sp;
assign conv_shift_to_k_a6_sp to "{P}{R}ConvShiftToKA6-SP";
monitor conv_shift_to_k_a6_sp;

int conv_shift_to_k_a7_sp;
assign conv_shift_to_k_a7_sp to "{P}{R}ConvShiftToKA7-SP";
monitor conv_shift_to_k_a7_sp;

int conv_shift_to_k_a8_sp;
assign conv_shift_to_k_a8_sp to "{P}{R}ConvShiftToKA8-SP";
monitor conv_shift_to_k_a8_sp;

%%// Conversion Coefficients - K to Energy

int conv_k_to_energy_evt;
assign conv_k_to_energy_evt to "ConvKToEnergyFlg";
monitor conv_k_to_energy_evt;
evflag conv_k_to_energy_evt_flg;
sync conv_k_to_energy_evt conv_k_to_energy_evt_flg;

int conv_k_to_energy_a0_sp;
assign conv_k_to_energy_a0_sp to "{P}{R}ConvKToEnergyA0-SP";
monitor conv_k_to_energy_a0_sp;

int conv_k_to_energy_a1_sp;
assign conv_k_to_energy_a1_sp to "{P}{R}ConvKToEnergyA1-SP";
monitor conv_k_to_energy_a1_sp;

int conv_k_to_energy_a2_sp;
assign conv_k_to_energy_a2_sp to "{P}{R}ConvKToEnergyA2-SP";
monitor conv_k_to_energy_a2_sp;

int conv_k_to_energy_a3_sp;
assign conv_k_to_energy_a3_sp to "{P}{R}ConvKToEnergyA3-SP";
monitor conv_k_to_energy_a3_sp;

int conv_k_to_energy_a4_sp;
assign conv_k_to_energy_a4_sp to "{P}{R}ConvKToEnergyA4-SP";
monitor conv_k_to_energy_a4_sp;

int conv_k_to_energy_a5_sp;
assign conv_k_to_energy_a5_sp to "{P}{R}ConvKToEnergyA5-SP";
monitor conv_k_to_energy_a5_sp;

int conv_k_to_energy_a6_sp;
assign conv_k_to_energy_a6_sp to "{P}{R}ConvKToEnergyA6-SP";
monitor conv_k_to_energy_a6_sp;

int conv_k_to_energy_a7_sp;
assign conv_k_to_energy_a7_sp to "{P}{R}ConvKToEnergyA7-SP";
monitor conv_k_to_energy_a7_sp;

int conv_k_to_energy_a8_sp;
assign conv_k_to_energy_a8_sp to "{P}{R}ConvKToEnergyA8-SP";
monitor conv_k_to_energy_a8_sp;

%%//----------------------------------------
%%//    Output PVs - High Level
%%//----------------------------------------

int enbl_low_lvl_ctrl_proc;
assign enbl_low_lvl_ctrl_proc to "{P}{R}EnblLowLvlCtrl.PROC";

int dsbl_low_lvl_ctrl_proc;
assign dsbl_low_lvl_ctrl_proc to "{P}{R}DsblLowLvlCtrl.PROC";

%%//----------------------------------------
%%//    Monitored PVs - Low Level
%%//----------------------------------------

int mod_01_motion_state_mon;
assign mod_01_motion_state_mon to "{P}{R}Mod01MotionState-Mon";
monitor mod_01_motion_state_mon;

%%//----------------------------------------
%%//    Output PVs - Low Level
%%//----------------------------------------

int mod_01_rel_pos_sp;
assign mod_01_rel_pos_sp to "{P}{R}Mod01RelPos-SP";

int mod_01_velo_sp;
assign mod_01_velo_sp to "{P}{R}Mod01Velo-SP";

int mod_01_acc_sp;
assign mod_01_acc_sp to "{P}{R}Mod01Acc-SP";

int mod_01_decel_sp;
assign mod_01_decel_sp to "{P}{R}Mod01Decel-SP";

int mod_01_phy_cid_actual_pos_mon;
assign mod_01_phy_cid_actual_pos_mon to "{P}{R}Mod01PhyCIDActualPos-Mon";

int mod_01_phy_cie_actual_pos_mon;
assign mod_01_phy_cie_actual_pos_mon to "{P}{R}Mod01PhyCIEActualPos-Mon";

int mod_01_phy_csd_actual_pos_mon;
assign mod_01_phy_csd_actual_pos_mon to "{P}{R}Mod01PhyCSDActualPos-Mon";

int mod_01_phy_cse_actual_pos_mon;
assign mod_01_phy_cse_actual_pos_mon to "{P}{R}Mod01PhyCSEActualPos-Mon";

int mod_01_coup_sel;
assign mod_01_coup_sel to "{P}{R}Mod01Coup-Sel";

int mod_01_trig_type_sel;
assign mod_01_trig_type_sel to "{P}{R}Mod01TrigType-Sel";

int mod_01_ref_type_sel;
assign mod_01_ref_type_sel to "{P}{R}Mod01RefType-Sel";

int inter_mod_coup_sel;
assign inter_mod_coup_sel to "{P}{R}InterModCoup-Sel";

int mod_01_mirror_sel;
assign mod_01_mirror_sel to "{P}{R}Mod01Mirror-Sel";

int mod_01_soft_trig_cmd;
assign mod_01_soft_trig_cmd to "{P}{R}Mod01SoftTrig-Cmd";

%%//----------------------------------------
%%//        Escaped C Code
%%//----------------------------------------

// required for calling seq_pvPut, seq_pvGet from embedded C code
foreign ssId;

%%#include <unistd.h>
%%#include <string.h>
%%#include <math.h>
%%#include "Logger.h"

// coupling modes
%%#define COUPLING_UNCOUPLED 0
%%#define COUPLING_ALL 1
%%#define COUPLING_PHASE 2
%%#define COUPLING_COUNTERPHASE 3
%%#define COUPLING_GV 4
%%#define COUPLING_GH 5

// main polarization positions (mm)
%%#define POL_LIN_VERT -26.25
%%#define POL_CIRC_RIGHT -13.125
%%#define POL_LIN_HOR 0.0
%%#define POL_CIRC_LEFT 13.125
%%// #define POL_LIN_VERT 26.25

// trigger
%%#define TRIG_TYPE_BOTH 0
%%#define TRIG_TYPE_SOFT 1
%%#define TRIG_TYPE_HARD 2

// inter-module coupling
%%#define INTER_MOD_COUPLING_001 1

// motion reference type
%%#define REFERENCE_TYPE_INTERNAL 0
%%#define REFERENCE_TYPE_EXTERNAL 1

// coupling mirror config
%%#define MIRROR_DISABLE 0
%%#define MIRROR_ENABLE 1

// motion state
%%#define MOTION_STATE_MOVING 0
%%#define MOTION_STATE_DONE 1

// gain specification
%%#define GAIN_MOTION_TYPE_MM 0
%%#define GAIN_MOTION_TYPE_K 1
%%#define GAIN_MOTION_TYPE_ENERGY 2

%%//----------------------------------------
%%//        State Notation Language
%%//----------------------------------------

ss motion_control {
    state init {
	when (delay(5.0)) {

            LOG_INFO("[%s%s] Initialization start\n", macValueGet("P"), macValueGet("R"));

            /* Initialize arrays */

            double step, max_travel, start;

            // initialize Shift - K conversion table x values

            max_travel = DELTA_PERIOD / 2;

            start = 0.0;

            step = max_travel/ (ARR_SIVE_CONV_SHIFT_K - 1);

            for (int i=0; i < ARR_SIVE_CONV_SHIFT_K; i++) {
                arr_conv_shift_k[0][i] = start + i * step;
            }

            // initialize K - Energy conversion table x values

            max_travel = DELTA_PERIOD;

            start = -1 * DELTA_PERIOD/2;

            step = max_travel/ (ARR_SIVE_CONV_K_ENERGY - 1);

            for (int i=0; i < ARR_SIVE_CONV_K_ENERGY; i++) {
                arr_conv_k_energy[0][i] = start + i * step;
            }

            LOG_INFO("[%s%s] Initialization finished\n", macValueGet("P"), macValueGet("R"));
	} state ready
    }

    state ready {
        entry {
            /* clear event flags to avoid
               old running invalid commands */
            efClear(change_pol_evt);
            efClear(change_gain_evt);
	    efClear(start_escan_evt);
            efClear(parking_request_evt);
            efClear(get_parking_request_evt);
        }

        when (efTestAndClear(conv_shift_to_k_evt)) {
        } state update_shift_to_k_conv

        when (efTestAndClear(conv_k_to_energy_evt)) {
        } state update_k_to_energy_conv

	when (efTestAndClear(get_parking_request_evt)) {
        } state get_parking_pos

	when (efTestAndClear(parking_request_evt)) {
        } state start_parking

	when (efTestAndClear(change_pol_evt)) {
        } state change_pol

	when (efTestAndClear(change_gain_evt)) {
        } state change_gain

	when (efTestAndClear(start_escan_evt)) {
        } state start_escan

    }

    state update_shift_to_k_conv {

        entry {

            /* Update Shift - K convertion table */

            for (int i=0; i < ARR_SIVE_CONV_SHIFT_K; i++) {
                double x = arr_conv_shift_k[0][i];

                // calculate corresponding y value
                arr_conv_shift_k[1][i] = conv_shift_to_k_a8_sp * pow(x, 8)
                                         + conv_shift_to_k_a7_sp * pow(x, 7)
                                         + conv_shift_to_k_a6_sp * pow(x, 6)
                                         + conv_shift_to_k_a5_sp * pow(x, 5)
                                         + conv_shift_to_k_a4_sp * pow(x, 4)
                                         + conv_shift_to_k_a3_sp * pow(x, 3)
                                         + conv_shift_to_k_a2_sp * pow(x, 2)
                                         + conv_shift_to_k_a1_sp * pow(x, 1)
                                         + conv_shift_to_k_a0_sp;
            }
        }

        when () {
        } state ready
    }

    state update_k_to_energy_conv {

        entry {

            /* Update K - Energy convertion table */

            for (int i=0; i < ARR_SIVE_CONV_K_ENERGY; i++) {
                double x = arr_conv_k_energy[0][i];

                // calculate corresponding y value
                arr_conv_k_energy[1][i] = conv_k_to_energy_a8_sp * pow(x, 8)
                                          + conv_k_to_energy_a7_sp * pow(x, 7)
                                          + conv_k_to_energy_a6_sp * pow(x, 6)
                                          + conv_k_to_energy_a5_sp * pow(x, 5)
                                          + conv_k_to_energy_a4_sp * pow(x, 4)
                                          + conv_k_to_energy_a3_sp * pow(x, 3)
                                          + conv_k_to_energy_a2_sp * pow(x, 2)
                                          + conv_k_to_energy_a1_sp * pow(x, 1)
                                          + conv_k_to_energy_a0_sp;
            }
        }

        when () {
        } state ready
    }



    state change_pol {

        entry {

            // local variables
            double var_target_pol, var_pos_diff;
            char var_check;

            // find target polarization
            if (pol_type_sel == 0) {
                var_target_pol = POL_CIRC_RIGHT;
            }
            else if (pol_type_sel == 1) {
                var_target_pol = POL_CIRC_LEFT;
            }
            else if (pol_type_sel == 2) {
                var_target_pol = POL_LIN_VERT;
            }
            else if (pol_type_sel == 3) {
                var_target_pol = POL_LIN_HOR;
            }

            // calculate position diff
            var_pos_diff = var_target_pol - actual_pol_displacement_mon;

            // check if diff is inside tolerance
            var_check = 1;
            if (var_pos_diff > pos_tolerance_sp
                || var_pos_diff < -pos_tolerance_sp) {

                var_check = 0;
            }

            // move to position
            if (check == 1) {
                // configure trigger to software
                mod_01_trig_type_sel = TRIG_TYPE_SOFT;
                pvPut(mod_01_trig_type_sel, SYNC);

                // make sure inter module coupling is right
                inter_mod_coup_sel = INTER_MOD_COUPLING_001;
                pvPut(inter_mod_coup_sel, SYNC);

                // configure motion reference type
                mod_01_ref_type_sel = REFERENCE_TYPE_INTERNAL;
                pvPut(mod_01_ref_type_sel, SYNC);

                // select phase coupling
                mod_01_coup_sel = COUPLING_PHASE;
                pvPut(mod_01_coup_sel, SYNC);

                // make sure mirror is disabled
                mod_01_mirror_sel = MIRROR_DISABLE;
                pvPut(mod_01_mirror_sel, SYNC);

                // configure velocity
                mod_01_velo_sp = pol_mode_velo_sp;
                pvPut(mod_01_velo_sp, SYNC);
                // configure acceleration
                mod_01_acc_sp = pol_mode_acc_sp;
                pvPut(mod_01_acc_sp, SYNC);
                // configure deceleration equal acceleration
                mod_01_decel_sp = pol_mode_acc_sp;
                pvPut(mod_01_decel_sp, SYNC);

                // configure relative position
                mod_01_rel_pos_sp = var_pos_diff;
                pvPut(mod_01_rel_pos_sp, SYNC);

                // send soft trigger to start motion
                mod_01_soft_trig_cmd = 1;
                pvPut(mod_01_soft_trig_cmd, SYNC);
            }
        }

        when (delay(1.0) && mod_01_motion_state_mon == MOTION_STATE_DONE) {
        } state ready
    }

    state change_gain {

        entry {

            // local variables
            double var_target_k, var_target_energy, var_pos_diff, var_target_mm = 0;
            char var_check, var_dir = 1;

            // find target gain shift
            if (gain_motion_type_sel == GAIN_MOTION_TYPE_MM) {

                // target position same as shift
                var_target_mm = shift_sp;
            }
            else if (gain_motion_type_sel == GAIN_MOTION_TYPE_K) {

                // convert K to shift in mm
//                var_target_mm = k2mm(k_sp);
            }
            else if (gain_motion_type_sel == GAIN_MOTION_TYPE_ENERGY) {

                // convert energy to shift in mm
//                var_target_mm = energy2mm(energy_sp);
            }

            // find direction of gain motion given current polarization
            if (var_target_pol >=0) {
                var_dir = -1;
            }
            else {
                var_dir = 1;
            }

            var_target_mm = var_dir * var_target_mm;

            // calculate position diff
            var_pos_diff = var_target_mm - actual_gain_displacement_mon;

            // check if diff is inside tolerance
            var_check = 1;
            if (var_pos_diff > pos_tolerance_sp
                || var_pos_diff < -pos_tolerance_sp) {

                var_check = 0;
            }

            // move to position
            if (check == 1) {
                // configure trigger to software
                mod_01_trig_type_sel = TRIG_TYPE_SOFT;
                pvPut(mod_01_trig_type_sel, SYNC);

                // make sure inter module coupling is right
                inter_mod_coup_sel = INTER_MOD_COUPLING_001;
                pvPut(inter_mod_coup_sel, SYNC);

                // configure motion reference type
                mod_01_ref_type_sel = REFERENCE_TYPE_INTERNAL;
                pvPut(mod_01_ref_type_sel, SYNC);

                // select gain coupling (GH)
                mod_01_coup_sel = COUPLING_GH;
                pvPut(mod_01_coup_sel, SYNC);

                // make sure mirror is disabled
                mod_01_mirror_sel = MIRROR_DISABLE;
                pvPut(mod_01_mirror_sel, SYNC);

                // configure velocity
                mod_01_velo_sp = gain_mode_velo_sp;
                pvPut(mod_01_velo_sp, SYNC);
                // configure acceleration
                mod_01_acc_sp = gain_mode_acc_sp;
                pvPut(mod_01_acc_sp, SYNC);
                // configure deceleration equal acceleration
                mod_01_decel_sp = gain_mode_acc_sp;
                pvPut(mod_01_decel_sp, SYNC);

                // configure relative position
                mod_01_rel_pos_sp = var_pos_diff;
                pvPut(mod_01_rel_pos_sp, SYNC);

                // send soft trigger to start motion
                mod_01_soft_trig_cmd = 1;
                pvPut(mod_01_soft_trig_cmd, SYNC);
            }


        }

        when (delay(1.0) && mod_01_motion_state_mon == MOTION_STATE_DONE) {
        } state ready
    }

    state start_escan {

        entry {
        }

        when (delay(1.0) && mod_01_motion_state_mon == MOTION_STATE_DONE) {
        } state ready
    }

    state start_parking {

        entry {

            // local variables
            double var_target_pol, var_target_gain, var_pol_diff, var_gain_diff;

            // calculate polarization position diff
            var_pol_diff = parking_pol_shift_sp - actual_pol_displacement_mon;

            // calculate gain position diff
            var_gain_diff = parking_gain_shift_sp - actual_gain_displacement_mon;

            // configure trigger to software
            mod_01_trig_type_sel = TRIG_TYPE_SOFT;
            pvPut(mod_01_trig_type_sel, SYNC);

            // make sure inter module coupling is right
            inter_mod_coup_sel = INTER_MOD_COUPLING_001;
            pvPut(inter_mod_coup_sel, SYNC);

            // configure motion reference type
            mod_01_ref_type_sel = REFERENCE_TYPE_INTERNAL;
            pvPut(mod_01_ref_type_sel, SYNC);

            // make sure mirror is disabled
            mod_01_mirror_sel = MIRROR_DISABLE;
            pvPut(mod_01_mirror_sel, SYNC);

            // ADJUST POL
            // select phase coupling
            mod_01_coup_sel = COUPLING_PHASE;
            pvPut(mod_01_coup_sel, SYNC);
            // configure velocity
            mod_01_velo_sp = pol_mode_velo_sp;
            pvPut(mod_01_velo_sp, SYNC);
            // configure acceleration
            mod_01_acc_sp = pol_mode_acc_sp;
            pvPut(mod_01_acc_sp, SYNC);
            // configure deceleration equal acceleration
            mod_01_decel_sp = pol_mode_acc_sp;
            pvPut(mod_01_decel_sp, SYNC);
            // configure relative position
            mod_01_rel_pos_sp = var_pol_diff;
            pvPut(mod_01_rel_pos_sp, SYNC);
            // send soft trigger to start motion
            mod_01_soft_trig_cmd = 1;
            pvPut(mod_01_soft_trig_cmd, SYNC);

            // ADJUST GAIN
            // select gain coupling (GH)
            mod_01_coup_sel = COUPLING_GH;
            pvPut(mod_01_coup_sel, SYNC);
            // configure velocity
            mod_01_velo_sp = gain_mode_velo_sp;
            pvPut(mod_01_velo_sp, SYNC);
            // configure acceleration
            mod_01_acc_sp = gain_mode_acc_sp;
            pvPut(mod_01_acc_sp, SYNC);
            // configure deceleration equal acceleration
            mod_01_decel_sp = gain_mode_acc_sp;
            pvPut(mod_01_decel_sp, SYNC);
            // configure relative position
            mod_01_rel_pos_sp = var_gain_diff;
            pvPut(mod_01_rel_pos_sp, SYNC);
            // send soft trigger to start motion
            mod_01_soft_trig_cmd = 1;
            pvPut(mod_01_soft_trig_cmd, SYNC);
        }

        when (delay(1.0) && mod_01_motion_state_mon == MOTION_STATE_DONE) {
        } state ready
    }

    state get_parking_pos {
        entry {

            // read current polarization and set parking
            parking_pol_shift_sp = actual_pol_displacement_mon;
            pvPut(parking_pol_shift_sp, SYNC);

            // read current gain and set parking
            parking_gain_shift_sp = actual_gain_displacement_mon;
            pvPut(parking_gain_shift_sp, SYNC);
        }

        when () {
        } state ready
    }

}
